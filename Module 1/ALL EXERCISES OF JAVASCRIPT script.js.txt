// Task 1: Basic Setup
console.log("Initialized: Community Connect Portal");
window.onload = function () {
  alert("Welcome! The portal is ready.");
};

// Task 2: Data Types & Operations
const programTitle = "Urban Gardening Workshop";
const scheduleDate = "2025-08-10";
let remainingSeats = 30;
console.log(`${programTitle} will happen on ${scheduleDate}. Available slots: ${remainingSeats}`);
remainingSeats--;

// Task 3: Validating Events and Error Catching
const activities = [
  { name: "Dance Fest", date: "2025-07-25", seats: 5 },
  { name: "Old Meetup", date: "2023-09-01", seats: 0 }
];
activities.forEach(evt => {
  const now = new Date();
  const evtDate = new Date(evt.date);
  if (evtDate > now && evt.seats > 0) {
    console.log(`Upcoming: ${evt.name}`);
  } else {
    console.log(`Excluded: ${evt.name}`);
  }
});
try {
  let pickEvent = activities[0];
  if (pickEvent.seats <= 0) throw "All seats are booked!";
  pickEvent.seats--;
  console.log("Signup successful.");
} catch (err) {
  console.error("Signup failed:", err);
}

// Task 4: Functions, Scope & Closures
function createEvent(title, group) {
  return { title, group };
}
function enrollUser(user, item) {
  console.log(`${user} has joined ${item.title}`);
}
function matchEvents(events, type) {
  return events.filter(e => e.group === type);
}
function eventCounter() {
  let total = 0;
  return function () {
    total++;
    return total;
  };
}
const trackHealth = eventCounter();
console.log(trackHealth());
console.log(trackHealth());

// Task 5: Object Constructors and Prototypes
function Activity(name, seats) {
  this.name = name;
  this.seats = seats;
}
Activity.prototype.hasSeats = function () {
  return this.seats > 0;
};
const fitnessClass = new Activity("Zumba Blast", 25);
console.log(Object.entries(fitnessClass));
console.log(fitnessClass.hasSeats());

// Task 6: Arrays & Methods
let sessions = [
  { name: "Pilates", type: "fitness" },
  { name: "Rock Show", type: "music" }
];
sessions.push({ name: "Painting 101", type: "art" });
let musicOnly = sessions.filter(s => s.type === "music");
let labels = sessions.map(s => `Session: ${s.name.toUpperCase()}`);
console.log(labels);

// Task 7: DOM Updates
const listContainer = document.querySelector("#eventList");
function insertEvent(evt) {
  const div = document.createElement("div");
  div.className = "mainCard";
  div.textContent = `${evt.name} - ${evt.date}`;
  listContainer.appendChild(div);
}

// Task 8: Event Listeners
const registerBtn = document.getElementById("registerBtn");
if (registerBtn) {
  registerBtn.onclick = () => alert("Registration confirmed!");
}
const filterSelect = document.getElementById("categoryFilter");
if (filterSelect) {
  filterSelect.onchange = e => filterEvents(e.target.value);
}
const inputSearch = document.getElementById("searchInput");
if (inputSearch) {
  inputSearch.addEventListener("keydown", e => {
    if (e.key === "Enter") console.log("Searching:", e.target.value);
  });
}

// Task 9: Async Operations
fetch("https://mockapi.io/community")
  .then(resp => resp.json())
  .then(data => console.log("Data fetched:", data))
  .catch(err => console.error(err));

async function getEventList() {
  document.getElementById("loading").style.display = "block";
  try {
    const res = await fetch("https://mockapi.io/community");
    const info = await res.json();
    console.log(info);
  } catch (e) {
    console.error("Data error:", e);
  } finally {
    document.getElementById("loading").style.display = "none";
  }
}

// Task 10: Modern Syntax Features
const activeEvents = [
  { name: "Mindfulness", date: "2025-09-10", category: "wellness" }
];
function announce({ name, date }) {
  console.log(`${name} coming on ${date}`);
}
const copyList = [...activeEvents];
announce(activeEvents[0]);

// Task 11: Form Handling
const regForm = document.getElementById("regForm");
if (regForm) {
  regForm.addEventListener("submit", function (e) {
    e.preventDefault();
    const name = this.elements["name"].value;
    const email = this.elements["email"].value;
    const selection = this.elements["event"].value;
    if (!name || !email) {
      document.getElementById("errorMsg").textContent = "Please fill out all fields.";
      return;
    }
    console.log(`Enrolled ${name} for ${selection}`);
  });
}

// Task 12: Sending Data
function postForm(data) {
  document.getElementById("status").textContent = "Please wait...";
  setTimeout(() => {
    fetch("https://mockapi.io/send", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data)
    })
    .then(res => res.json())
    .then(() => {
      document.getElementById("status").textContent = "Submission successful!";
    })
    .catch(() => {
      document.getElementById("status").textContent = "Submission failed.";
    });
  }, 2000);
}

// Task 13: Debugging
console.log("Preparing to submit form...");
try {
  const formPayload = { name: "Alice", email: "alice@domain.com" };
  console.log("Sending:", formPayload);
  // Placeholder for fetch
} catch (err) {
  console.error("Debug Error:", err);
}

// Task 14: jQuery Demo
$("#registerBtn").click(function () {
  alert("You clicked to register!");
  $(".mainCard").fadeOut().fadeIn();
});
