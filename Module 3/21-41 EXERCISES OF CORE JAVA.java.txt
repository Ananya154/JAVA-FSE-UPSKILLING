// Task 21: Age Validation with Custom Exception
class AgeNotValidException extends Exception {
    public AgeNotValidException(String message) {
        super(message);
    }
}

public class AgeCheck {
    public static void main(String[] args) {
        int age = 16;
        try {
            if (age < 18)
                throw new AgeNotValidException("You must be 18+ to proceed.");
            else
                System.out.println("Age verified successfully.");
        } catch (AgeNotValidException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}

// Task 22: Writing to File
import java.io.*;
import java.util.Scanner;

public class FileWriterDemo {
    public static void main(String[] args) throws IOException {
        Scanner reader = new Scanner(System.in);
        System.out.print("Text to save in file: ");
        String input = reader.nextLine();

        BufferedWriter writer = new BufferedWriter(new FileWriter("notes.txt"));
        writer.write(input);
        writer.close();

        System.out.println("Data saved to notes.txt");
    }
}

// Task 23: Reading from File
import java.io.*;

public class FileReaderDemo {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("notes.txt"));
        String data;
        while ((data = br.readLine()) != null) {
            System.out.println(data);
        }
        br.close();
    }
}

// Task 24: Manage List of Students
import java.util.*;

public class StudentArrayList {
    public static void main(String[] args) {
        ArrayList<String> names = new ArrayList<>();
        Scanner input = new Scanner(System.in);
        System.out.println("Add students (type 'exit' to finish):");
        while (true) {
            String name = input.nextLine();
            if (name.equalsIgnoreCase("exit")) break;
            names.add(name);
        }
        names.forEach(System.out::println);
    }
}

// Task 25: Store Students Using HashMap
import java.util.*;

public class StudentDirectory {
    public static void main(String[] args) {
        HashMap<Integer, String> records = new HashMap<>();
        Scanner in = new Scanner(System.in);

        System.out.println("Enter student ID and name (-1 to stop):");
        while (true) {
            System.out.print("ID: ");
            int id = in.nextInt();
            if (id == -1) break;
            in.nextLine();
            System.out.print("Name: ");
            String name = in.nextLine();
            records.put(id, name);
        }

        System.out.print("Enter ID to search: ");
        int key = in.nextInt();
        System.out.println("Name: " + records.getOrDefault(key, "No Match Found"));
    }
}

// Task 26: Launch Threads
class SimpleThread extends Thread {
    public void run() {
        System.out.println("Running thread: " + Thread.currentThread().getName());
    }

    public static void main(String[] args) {
        SimpleThread one = new SimpleThread();
        SimpleThread two = new SimpleThread();
        one.start();
        two.start();
    }
}

// Task 27: Sort List Using Lambda
import java.util.*;

public class LambdaSorting {
    public static void main(String[] args) {
        List<String> data = Arrays.asList("Sara", "Mike", "Adam", "Zoe");
        data.sort((s1, s2) -> s1.compareToIgnoreCase(s2));
        data.forEach(System.out::println);
    }
}

// Task 28: Use Stream API
import java.util.*;
import java.util.stream.*;

public class StreamExample {
    public static void main(String[] args) {
        List<Integer> nums = Arrays.asList(12, 14, 17, 20);
        nums.stream().filter(n -> n % 2 == 0).forEach(System.out::println);
    }
}

// Task 29: Java Record Usage
record Member(String name, int age) {}

import java.util.*;

public class RecordUsage {
    public static void main(String[] args) {
        List<Member> list = List.of(
            new Member("Ram", 25),
            new Member("Shyam", 19),
            new Member("Meera", 21)
        );
        list.stream().filter(m -> m.age() >= 21).forEach(System.out::println);
    }
}

// Task 30: Pattern Switch Demo
public class TypeChecker {
    public static void inspect(Object obj) {
        switch (obj) {
            case String s -> System.out.println("Text: " + s);
            case Integer i -> System.out.println("Number: " + i);
            case Double d -> System.out.println("Decimal: " + d);
            default -> System.out.println("Type unknown");
        }
    }

    public static void main(String[] args) {
        inspect("Java");
        inspect(99);
        inspect(9.5);
    }
}

// Task 31: Connect to SQLite with JDBC
import java.sql.*;

public class DatabaseViewer {
    public static void main(String[] args) {
        try (Connection db = DriverManager.getConnection("jdbc:sqlite:college.db")) {
            Statement stmt = db.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM student");
            while (rs.next()) {
                System.out.println(rs.getInt("id") + " - " + rs.getString("name"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

// Task 32: Add/Update Records via JDBC
import java.sql.*;

public class StudentDBManager {
    Connection db;

    StudentDBManager() throws SQLException {
        db = DriverManager.getConnection("jdbc:sqlite:college.db");
    }

    void addStudent(int id, String name) throws SQLException {
        PreparedStatement p = db.prepareStatement("INSERT INTO student (id, name) VALUES (?, ?)");
        p.setInt(1, id);
        p.setString(2, name);
        p.executeUpdate();
    }

    void editStudent(int id, String name) throws SQLException {
        PreparedStatement p = db.prepareStatement("UPDATE student SET name = ? WHERE id = ?");
        p.setString(1, name);
        p.setInt(2, id);
        p.executeUpdate();
    }
}

// Task 33: Handle Transactions
import java.sql.*;

public class FundTransfer {
    public static void main(String[] args) {
        try (Connection db = DriverManager.getConnection("jdbc:sqlite:bank.db")) {
            db.setAutoCommit(false);

            Statement stmt = db.createStatement();
            stmt.executeUpdate("UPDATE accounts SET balance = balance - 500 WHERE id = 1");
            stmt.executeUpdate("UPDATE accounts SET balance = balance + 500 WHERE id = 2");

            db.commit();
            System.out.println("Transfer successful");
        } catch (SQLException ex) {
            System.out.println("Transfer failed: " + ex.getMessage());
        }
    }
}

// Task 34: Java Module Structure
module-info.java in com.lib:
module com.lib {
    exports com.lib;
}

module-info.java in com.app:
module com.app {
    requires com.lib;
}

// Task 35: TCP Server and Client
Server:
import java.net.*;
import java.io.*;

public class ChatServer {
    public static void main(String[] args) throws IOException {
        ServerSocket server = new ServerSocket(8888);
        Socket client = server.accept();
        BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));
        PrintWriter out = new PrintWriter(client.getOutputStream(), true);
        out.println("Hi Client");
        System.out.println("Client says: " + in.readLine());
        client.close();
        server.close();
    }
}

Client:
import java.net.*;
import java.io.*;

public class ChatClient {
    public static void main(String[] args) throws IOException {
        Socket client = new Socket("localhost", 8888);
        BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));
        PrintWriter out = new PrintWriter(client.getOutputStream(), true);
        System.out.println("Server says: " + in.readLine());
        out.println("Hi Server");
        client.close();
    }
}

// Task 36: Send HTTP GET Request
import java.net.http.*;
import java.net.URI;
import java.io.IOException;

public class HttpGetExample {
    public static void main(String[] args) throws IOException, InterruptedException {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest req = HttpRequest.newBuilder()
                .uri(URI.create("https://api.github.com"))
                .build();
        HttpResponse<String> res = client.send(req, HttpResponse.BodyHandlers.ofString());
        System.out.println("Status: " + res.statusCode());
        System.out.println("Response: " + res.body());
    }
}

// Task 37: Inspect Java Bytecode
public class BytecodeDemo {
    public static int square(int n) {
        return n * n;
    }
    public static void main(String[] args) {
        System.out.println(square(4));
    }
}

Command:
javac BytecodeDemo.java
javap -c BytecodeDemo

// Task 38: View Decompiled Class
Hello.java:
public class Hello {
    public static void main(String[] args) {
        System.out.println("Hello Java");
    }
}

Compile:
javac Hello.java
Decompile:
java -jar cfr.jar Hello.class

// Task 39: Use Reflection API
import java.lang.reflect.*;
public class ReflectTest {
    public static void main(String[] args) throws Exception {
        Class<?> strClass = Class.forName("java.lang.String");
        Method[] methods = strClass.getDeclaredMethods();
        for (Method m : methods) {
            System.out.println(m.getName());
        }
    }
}

// Task 40: Virtual Threads (Java 21+)
public class LightThreads {
    public static void main(String[] args) {
        for (int i = 0; i < 100_000; i++) {
            Thread.startVirtualThread(() -> System.out.println("Running lightweight thread"));
        }
    }
}

// Task 41: Callable Tasks with ExecutorService
import java.util.concurrent.*;
import java.util.*;

public class MultiTasking {
    public static void main(String[] args) throws Exception {
        ExecutorService pool = Executors.newFixedThreadPool(3);
        List<Callable<String>> jobList = List.of(
            () -> "First Job Done",
            () -> "Second Job Done",
            () -> "Third Job Done"
        );
        List<Future<String>> outputs = pool.invokeAll(jobList);
        for (Future<String> f : outputs) {
            System.out.println(f.get());
        }
        pool.shutdown();
    }
}
